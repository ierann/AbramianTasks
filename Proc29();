[1mdiff --git a/.vs/Good/v16/.suo b/.vs/Good/v16/.suo[m
[1mindex 62f9d35..50aa51f 100644[m
Binary files a/.vs/Good/v16/.suo and b/.vs/Good/v16/.suo differ
[1mdiff --git a/.vs/Good/v16/Browse.VC.db b/.vs/Good/v16/Browse.VC.db[m
[1mindex 0aba8c8..0e4986b 100644[m
Binary files a/.vs/Good/v16/Browse.VC.db and b/.vs/Good/v16/Browse.VC.db differ
[1mdiff --git a/Good.cpp b/Good.cpp[m
[1mindex 50ed891..f309cd7 100644[m
[1m--- a/Good.cpp[m
[1m+++ b/Good.cpp[m
[36m@@ -3,11 +3,54 @@[m [musing namespace std;[m
 [m
 bool IsPowerN(int k, int n);[m
 bool IsPower(int k);[m
[31m-void proc27();[m
[32m+[m[32mbool IsPrime(int n);[m
[32m+[m[32mbool DigitCount(int k);[m
[32m+[m[32mvoid proc29();[m
 [m
 int main()[m
 {[m
[31m-    proc27();[m
[32m+[m[32m    proc29();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid proc29()[m
[32m+[m[32m{[m
[32m+[m[32m    /*–û–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é DigitCount(K ) —Ü–µ–ª–æ–≥–æ —Ç–∏–ø–∞, –Ω–∞—Ö–æ–¥—è—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[m
[32m+[m[32m    —Ü–∏—Ñ—Ä —Ü–µ–ª–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ K. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[m
[32m+[m[32m    —Ü–∏—Ñ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–ª—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.*/[m
[32m+[m
[32m+[m[32m    int k;[m
[32m+[m[32m    for (int i = 0; i < 5; i++)[m
[32m+[m[32m    {[m
[32m+[m[32m        k = rand() % 100 - 50;[m
[32m+[m[32m        cout << DigitCount(k) << endl;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint DigitCount(int k)[m
[32m+[m[32m{[m
[32m+[m[32m    int i = 1;[m
[32m+[m[32m    for (int i = 0; k >= 10; i++) k /= 10;[m
[32m+[m[32m    return i;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid proc28()[m
[32m+[m[32m{[m
[32m+[m[32m    /*–û–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é IsPrime(N ) –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é TRUE,[m
[32m+[m[32m    –µ—Å–ª–∏ —Ü–µ–ª—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä N (> 1) —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º, –∏ FALSE –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ (—á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 1, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∏–º–µ–µ—Ç[m
[32m+[m[32m    –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ 1 –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è). –î–∞–Ω –Ω–∞–±–æ—Ä –∏–∑ 10 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –±–æ–ª—å—à–∏—Ö 1. –° –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ IsPrime –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[m
[32m+[m[32m    –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ.*/[m
[32m+[m
[32m+[m[32m    int n;[m
[32m+[m[32m    cout << "Enter number: ";[m
[32m+[m[32m    cin >> n;[m
[32m+[m[32m    cout << "Answer is " << IsPrime(n) << endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool IsPrime(int n)[m
[32m+[m[32m{[m
[32m+[m[32m    while (n % 1 != 0);[m
[32m+[m[32m    return false;[m
 }[m
 [m
 void proc27()[m
